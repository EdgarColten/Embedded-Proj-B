/*
 * OutputDriver.h
 *
 *  Created on: Sep 26, 2024
 *      Author: LogMa
 */

#include <cstdint>
#include "main.h"
#include "stm32l4xx_hal.h"

//Custom includes
#include "cpp_main.h"
#include "displayQueue.h"
#include "Queue.h"
#include "waveQueue.h"

#ifndef INC_OUTPUTDRIVER_H_
#define INC_OUTPUTDRIVER_H_

#define PI 3.1415926535
#define MAX_SIZE 4096
#define SIZE 256
#define CPU_CLK 80000000

#define PHASE_SHIFT 32 //value to shift the outWave buffer for the delay

class OutputDriver{ // @suppress("Miss copy constructor or assignment operator")
private:

	//IPC attributes
	displayQueue* oledQueue;
	waveQueue* signalQueue;


	//Core attributes
	uint32_t freq;
	uint32_t amp;
	uint32_t offset;
	uint32_t autoReload;
	uint8_t channel;

	uint8_t currentChannelSelected;

	//Output wave tables
	uint32_t outWave[SIZE];

	const uint32_t sineWave[SIZE] = {2047, 2097, 2147, 2197, 2247, 2297, 2347, 2396, 2446, 2495, 2544, 2592, 2641, 2689, 2736, 2783, 2830, 2876, 2922, 2967, 3011, 3055, 3099, 3142, 3184, 3225, 3266, 3306, 3345, 3384, 3421, 3458, 3494, 3529, 3563, 3597, 3629, 3660, 3691, 3720, 3749, 3776, 3802, 3828, 3852, 3875, 3897, 3918, 3938, 3956, 3974, 3990, 4005, 4019, 4032, 4044, 4054, 4063, 4071, 4078, 4084, 4088, 4091, 4093, 4094, 4093, 4091, 4088, 4084, 4078, 4071, 4063, 4054, 4044, 4032, 4019, 4005, 3990, 3974, 3956, 3938, 3918, 3897, 3875, 3852, 3828, 3802, 3776, 3749, 3720, 3691, 3660, 3629, 3597, 3563, 3529, 3494, 3458, 3421, 3384, 3345, 3306, 3266, 3225, 3184, 3142, 3099, 3055, 3011, 2967, 2922, 2876, 2830, 2783, 2736, 2689, 2641, 2592, 2544, 2495, 2446, 2396, 2347, 2297, 2247, 2197, 2147, 2097, 2047, 1996, 1946, 1896, 1846, 1796, 1746, 1697, 1647, 1598, 1549, 1501, 1452, 1404, 1357, 1310, 1263, 1217, 1171, 1126, 1082, 1038, 994, 951, 909, 868, 827, 787, 748, 709, 672, 635, 599, 564, 530, 496, 464, 433, 402, 373, 344, 317, 291, 265, 241, 218, 196, 175, 155, 137, 119, 103, 88, 74, 61, 49, 39, 30, 22, 15, 9, 5, 2, 0, 0, 0, 2, 5, 9, 15, 22, 30, 39, 49, 61, 74, 88, 103, 119, 137, 155, 175, 196, 218, 241, 265, 291, 317, 344, 373, 402, 433, 464, 496, 530, 564, 599, 635, 672, 709, 748, 787, 827, 868, 909, 951, 994, 1038, 1082, 1126, 1171, 1217, 1263, 1310, 1357, 1404, 1452, 1501, 1549, 1598, 1647, 1697, 1746, 1796, 1846, 1896, 1946, 1996};
	const uint32_t squareWave[SIZE] = {4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	const uint32_t pulseWave[SIZE] = {4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	uint32_t delayOutWave[SIZE];

	//Setting wave type
	enum waveType shape; //delay is only for channel 2



	//packing values for the display
	displayValues dValues;


public:
	OutputDriver(uint8_t,waveQueue*,displayQueue*);
	void update_Channel(OutputDriver);
	void calculateAutoReload();

	void setAttributes(waveProp);
	void getAttributes(waveProp*);
	void generateWave();
	void setAutoReload(TIM_HandleTypeDef*);

	void delaySet();

	void pack();

};

#endif /* INC_OUTPUTDRIVER_H_ */
